// Objective-C API for talking to github.com/0chain/gosdk/mobilesdk/zbox Go package.
//   gobind -lang=objc github.com/0chain/gosdk/mobilesdk/zbox
//
// File is generated by gobind. Do not edit.

#ifndef __Zbox_H__
#define __Zbox_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Zcncore.objc.h"

@class ZboxAllocation;
@class ZboxAuthTicket;
@class ZboxM3u8Downloader;
@class ZboxMediaItem;
@class ZboxMediaPlaylist;
@class ZboxMinMaxCost;
@class ZboxStatusBarMocked;
@class ZboxStatusCallbackWrapped;
@class ZboxStreamingService;
@protocol ZboxM3u8Writer;
@class ZboxM3u8Writer;
@protocol ZboxStatusCallbackMocked;
@class ZboxStatusCallbackMocked;
@protocol ZboxStreamingImpl;
@class ZboxStreamingImpl;

@protocol ZboxM3u8Writer <NSObject>
- (BOOL)seek:(int64_t)offset whence:(long)whence ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)sync:(NSError* _Nullable* _Nullable)error;
- (BOOL)truncate:(int64_t)size error:(NSError* _Nullable* _Nullable)error;
- (BOOL)write:(NSData* _Nullable)p0 n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ZboxStatusCallbackMocked <NSObject>
- (void)commitMetaCompleted:(NSString* _Nullable)request response:(NSString* _Nullable)response err:(NSError* _Nullable)err;
- (void)completed:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath filename:(NSString* _Nullable)filename mimetype:(NSString* _Nullable)mimetype size:(long)size op:(long)op;
- (void)error:(NSString* _Nullable)allocationID filePath:(NSString* _Nullable)filePath op:(long)op err:(NSError* _Nullable)err;
- (void)inProgress:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath op:(long)op completedBytes:(long)completedBytes data:(NSData* _Nullable)data;
- (void)repairCompleted:(long)filesRepaired;
- (void)started:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath op:(long)op totalBytes:(long)totalBytes;
@end

@protocol ZboxStreamingImpl <NSObject>
- (NSString* _Nonnull)getCurrentManifest;
- (NSString* _Nonnull)getFirstSegment:(NSString* _Nullable)localPath remotePath:(NSString* _Nullable)remotePath tmpPath:(NSString* _Nullable)tmpPath delay:(long)delay maxSegments:(long)maxSegments error:(NSError* _Nullable* _Nullable)error;
// skipped method StreamingImpl.PlayStreaming with unsupported parameter or return types

- (BOOL)stop:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Allocation - structure for allocation object
 */
@interface ZboxAllocation : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
@property (nonatomic) long dataShards;
@property (nonatomic) long parityShards;
@property (nonatomic) int64_t size;
@property (nonatomic) int64_t expiration;
@property (nonatomic) NSString* _Nonnull name;
@property (nonatomic) NSString* _Nonnull stats;
/**
 * CancelDownload - cancel file download
 */
- (BOOL)cancelDownload:(NSString* _Nullable)remotepath error:(NSError* _Nullable* _Nullable)error;
/**
 * CancelRepair - cancel repair files from path
 */
- (BOOL)cancelRepair:(NSError* _Nullable* _Nullable)error;
/**
 * CancelUpload - cancel file upload
 */
- (BOOL)cancelUpload:(NSString* _Nullable)localpath error:(NSError* _Nullable* _Nullable)error;
/**
 * CopyObject - copy object from path to dest
 */
- (BOOL)copyObject:(NSString* _Nullable)path destPath:(NSString* _Nullable)destPath error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createDir:(NSString* _Nullable)dirName error:(NSError* _Nullable* _Nullable)error;
/**
 * DeleteFile - delete file from remote path
 */
- (BOOL)deleteFile:(NSString* _Nullable)remotePath error:(NSError* _Nullable* _Nullable)error;
/**
 * DownloadFile - start download file from remote path to localpath
 */
- (BOOL)downloadFile:(NSString* _Nullable)remotePath localPath:(NSString* _Nullable)localPath statusCb:(id<ZboxStatusCallbackMocked> _Nullable)statusCb error:(NSError* _Nullable* _Nullable)error;
/**
 * DownloadFileByBlock - start download file from remote path to localpath by blocks number
 */
- (BOOL)downloadFileByBlock:(NSString* _Nullable)remotePath localPath:(NSString* _Nullable)localPath startBlock:(int64_t)startBlock endBlock:(int64_t)endBlock numBlocks:(long)numBlocks statusCb:(id<ZboxStatusCallbackMocked> _Nullable)statusCb error:(NSError* _Nullable* _Nullable)error;
/**
 * DownloadFromAuthTicket - download file from Auth ticket
 */
- (BOOL)downloadFromAuthTicket:(NSString* _Nullable)localPath authTicket:(NSString* _Nullable)authTicket remoteLookupHash:(NSString* _Nullable)remoteLookupHash remoteFilename:(NSString* _Nullable)remoteFilename status:(id<ZboxStatusCallbackMocked> _Nullable)status error:(NSError* _Nullable* _Nullable)error;
/**
 * DownloadFromAuthTicketByBlocks - download file from Auth ticket by blocks number
 */
- (BOOL)downloadFromAuthTicketByBlocks:(NSString* _Nullable)localPath authTicket:(NSString* _Nullable)authTicket startBlock:(int64_t)startBlock endBlock:(int64_t)endBlock numBlocks:(long)numBlocks remoteLookupHash:(NSString* _Nullable)remoteLookupHash remoteFilename:(NSString* _Nullable)remoteFilename status:(id<ZboxStatusCallbackMocked> _Nullable)status error:(NSError* _Nullable* _Nullable)error;
/**
 * DownloadThumbnail - start download file thumbnail from remote path to localpath
 */
- (BOOL)downloadThumbnail:(NSString* _Nullable)remotePath localPath:(NSString* _Nullable)localPath statusCb:(id<ZboxStatusCallbackMocked> _Nullable)statusCb error:(NSError* _Nullable* _Nullable)error;
/**
 * DownloadThumbnailFromAuthTicket - downloadThumbnail from Auth ticket
 */
- (BOOL)downloadThumbnailFromAuthTicket:(NSString* _Nullable)localPath authTicket:(NSString* _Nullable)authTicket remoteLookupHash:(NSString* _Nullable)remoteLookupHash remoteFilename:(NSString* _Nullable)remoteFilename status:(id<ZboxStatusCallbackMocked> _Nullable)status error:(NSError* _Nullable* _Nullable)error;
/**
 * GetStatistics - get allocation stats
 */
- (NSString* _Nonnull)getAllocationStats:(NSError* _Nullable* _Nullable)error;
/**
 * GetAuthToken - get auth token from refereeClientID
 */
- (NSString* _Nonnull)getAuthToken:(NSString* _Nullable)path filename:(NSString* _Nullable)filename referenceType:(NSString* _Nullable)referenceType refereeClientID:(NSString* _Nullable)refereeClientID refereeEncryptionPublicKey:(NSString* _Nullable)refereeEncryptionPublicKey expiration:(int64_t)expiration error:(NSError* _Nullable* _Nullable)error;
/**
 * GetBlobberStats - get blobbers stats
 */
- (NSString* _Nonnull)getBlobberStats:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getCurrentManifest;
/**
 * GetDiff - cancel file diff
 */
- (NSString* _Nonnull)getDiff:(NSString* _Nullable)lastSyncCachePath localRootPath:(NSString* _Nullable)localRootPath localFileFilters:(NSString* _Nullable)localFileFilters remoteExcludePaths:(NSString* _Nullable)remoteExcludePaths error:(NSError* _Nullable* _Nullable)error;
/**
 * GetFileMeta - getting file meta details from file path
 */
- (NSString* _Nonnull)getFileMeta:(NSString* _Nullable)path error:(NSError* _Nullable* _Nullable)error;
/**
 * GetFileMetaFromAuthTicket - getting file meta details from file path and auth ticket
 */
- (NSString* _Nonnull)getFileMetaFromAuthTicket:(NSString* _Nullable)authTicket lookupHash:(NSString* _Nullable)lookupHash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetFileStats - get file stats from path
 */
- (NSString* _Nonnull)getFileStats:(NSString* _Nullable)path error:(NSError* _Nullable* _Nullable)error;
/**
 * GetFirstSegment - getting the amount of segments in maxSegments for very first playback
 */
- (NSString* _Nonnull)getFirstSegment:(NSString* _Nullable)localPath remotePath:(NSString* _Nullable)remotePath tmpPath:(NSString* _Nullable)tmpPath delay:(long)delay maxSegments:(long)maxSegments error:(NSError* _Nullable* _Nullable)error;
/**
 * GetMaxStorageCost - getting back max cost for allocation
 */
- (NSString* _Nonnull)getMaxStorageCost:(int64_t)size error:(NSError* _Nullable* _Nullable)error;
/**
 * GetMaxStorageCostWithBlobbers - getting cost for listed blobbers
 */
- (NSString* _Nonnull)getMaxStorageCostWithBlobbers:(int64_t)size blobbersJson:(NSString* _Nullable)blobbersJson error:(NSError* _Nullable* _Nullable)error;
/**
 * GetMinStorageCost - getting back min cost for allocation
 */
- (NSString* _Nonnull)getMinStorageCost:(int64_t)size error:(NSError* _Nullable* _Nullable)error;
/**
 * GetMinWriteRead - getting back cost for allocation
 */
- (NSString* _Nonnull)getMinWriteRead:(NSError* _Nullable* _Nullable)error;
/**
 * GetShareAuthToken - get auth ticket from refereeClientID
 */
- (NSString* _Nonnull)getShareAuthToken:(NSString* _Nullable)path filename:(NSString* _Nullable)filename referenceType:(NSString* _Nullable)referenceType refereeClientID:(NSString* _Nullable)refereeClientID error:(NSError* _Nullable* _Nullable)error;
/**
 * ListDir - listing files from path
 */
- (NSString* _Nonnull)listDir:(NSString* _Nullable)path error:(NSError* _Nullable* _Nullable)error;
/**
 * ListDirFromAuthTicket - listing files from path with auth ticket
 */
- (NSString* _Nonnull)listDirFromAuthTicket:(NSString* _Nullable)authTicket lookupHash:(NSString* _Nullable)lookupHash error:(NSError* _Nullable* _Nullable)error;
/**
 * MoveObject - move object from path to dest
 */
- (BOOL)moveObject:(NSString* _Nullable)path destPath:(NSString* _Nullable)destPath error:(NSError* _Nullable* _Nullable)error;
// skipped method Allocation.PlayStreaming with unsupported parameter or return types

/**
 * RenameObject - rename or move file
 */
- (BOOL)renameObject:(NSString* _Nullable)remotePath destName:(NSString* _Nullable)destName error:(NSError* _Nullable* _Nullable)error;
/**
 * RepairFile - repair file if it exists in remote path
## Inputs
  - workdir: set a workdir as ~/.zcn on mobile apps
  - localPath: the local full path of file. eg /usr/local/files/zcn.png
  - remotePath:
  - thumbnailPath: the local full path of thumbnail
  - encrypt: the file should be ecnrypted or not on uploading
  - statusCb: callback of status
 */
- (BOOL)repairFile:(NSString* _Nullable)workdir localPath:(NSString* _Nullable)localPath remotePath:(NSString* _Nullable)remotePath thumbnailPath:(NSString* _Nullable)thumbnailPath encrypt:(BOOL)encrypt statusCb:(id<ZboxStatusCallbackMocked> _Nullable)statusCb error:(NSError* _Nullable* _Nullable)error;
/**
 * SaveRemoteSnapshot - saving remote snapshot
 */
- (BOOL)saveRemoteSnapshot:(NSString* _Nullable)pathToSave remoteExcludePaths:(NSString* _Nullable)remoteExcludePaths error:(NSError* _Nullable* _Nullable)error;
/**
 * StartRepair - start repair files from path
 */
- (BOOL)startRepair:(NSString* _Nullable)localRootPath pathToRepair:(NSString* _Nullable)pathToRepair statusCb:(id<ZboxStatusCallbackMocked> _Nullable)statusCb error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stopStreaming:(NSError* _Nullable* _Nullable)error;
/**
 * UploadFile - update file/thumbnail from local path to remote path
## Inputs
  - workdir: set a workdir as ~/.zcn on mobile apps
  - localPath: the local full path of file. eg /usr/local/files/zcn.png
  - remotePath:
  - thumbnailPath: the local full path of thumbnail
  - encrypt: the file should be ecnrypted or not on uploading
  - statusCb: callback of status
 */
- (BOOL)updateFile:(NSString* _Nullable)workdir localPath:(NSString* _Nullable)localPath remotePath:(NSString* _Nullable)remotePath thumbnailPath:(NSString* _Nullable)thumbnailPath encrypt:(BOOL)encrypt statusCb:(id<ZboxStatusCallbackMocked> _Nullable)statusCb error:(NSError* _Nullable* _Nullable)error;
/**
 * UploadFile - upload file/thumbnail from local path to remote path
## Inputs
  - workdir: set a workdir as ~/.zcn on mobile apps
  - localPath: the local full path of file. eg /usr/local/files/zcn.png
  - remotePath:
  - thumbnailPath: the local full path of thumbnail
  - encrypt: the file should be ecnrypted or not on uploading
  - statusCb: callback of status
 */
- (BOOL)uploadFile:(NSString* _Nullable)workdir localPath:(NSString* _Nullable)localPath remotePath:(NSString* _Nullable)remotePath thumbnailPath:(NSString* _Nullable)thumbnailPath encrypt:(BOOL)encrypt statusCb:(id<ZboxStatusCallbackMocked> _Nullable)statusCb error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * AuthTicket - auth ticket structure
 */
@interface ZboxAuthTicket : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetFilename - getting file name
 */
- (NSString* _Nonnull)getFilename:(NSError* _Nullable* _Nullable)error;
/**
 * IsDir - checking if it's dir
 */
- (BOOL)isDir:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * M3u8Downloader download files from blobber's dir, and build them into a local m3u8 playlist
 */
@interface ZboxM3u8Downloader : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field M3u8Downloader.RWMutex with unsupported type: sync.RWMutex

- (void)lock;
- (void)rLock;
// skipped method M3u8Downloader.RLocker with unsupported parameter or return types

- (void)rUnlock;
- (BOOL)tryLock;
- (BOOL)tryRLock;
- (void)unlock;
@end

/**
 * MediaItem is .ts file
 */
@interface ZboxMediaItem : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull name;
@property (nonatomic) NSString* _Nonnull path;
@end

/**
 * MediaPlaylist m3u8 encoder and decoder
 */
@interface ZboxMediaPlaylist : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewMediaPlaylist create media playlist(.m3u8)
 */
- (nullable instancetype)init:(long)delay writer:(id<ZboxM3u8Writer> _Nullable)writer;
@property (nonatomic) id<ZboxM3u8Writer> _Nullable writer;
// skipped field MediaPlaylist.Wait with unsupported type: []string

@property (nonatomic) long seq;
/**
 * Append append new item
 */
- (void)append:(NSString* _Nullable)item;
/**
 * Encode encode m3u8
 */
- (NSData* _Nullable)encode;
/**
 * Play start to push item into playlist
 */
- (void)play;
/**
 * String implement Stringer
 */
- (NSString* _Nonnull)string;
@end

/**
 * MinMaxCost - keeps cost for allocation update/creation
 */
@interface ZboxMinMaxCost : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

@interface ZboxStatusBarMocked : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method StatusBarMocked.CommitMetaCompleted with unsupported parameter or return types

- (void)completed:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath filename:(NSString* _Nullable)filename mimetype:(NSString* _Nullable)mimetype size:(long)size op:(long)op;
- (void)error:(NSString* _Nullable)allocationID filePath:(NSString* _Nullable)filePath op:(long)op err:(NSError* _Nullable)err;
- (void)inProgress:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath op:(long)op completedBytes:(long)completedBytes data:(NSData* _Nullable)data;
- (void)repairCompleted:(long)filesRepaired;
- (void)started:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath op:(long)op totalBytes:(long)totalBytes;
@end

@interface ZboxStatusCallbackWrapped : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) id<ZboxStatusCallbackMocked> _Nullable callback;
// skipped method StatusCallbackWrapped.CommitMetaCompleted with unsupported parameter or return types

- (void)completed:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath filename:(NSString* _Nullable)filename mimetype:(NSString* _Nullable)mimetype size:(long)size op:(long)op;
- (void)error:(NSString* _Nullable)allocationID filePath:(NSString* _Nullable)filePath op:(long)op err:(NSError* _Nullable)err;
- (void)inProgress:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath op:(long)op completedBytes:(long)completedBytes data:(NSData* _Nullable)data;
- (void)repairCompleted:(long)filesRepaired;
- (void)started:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath op:(long)op totalBytes:(long)totalBytes;
@end

/**
 * StreamingService - holder for streaming service
 */
@interface ZboxStreamingService : NSObject <goSeqRefInterface, ZboxStreamingImpl> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (NSString* _Nonnull)getCurrentManifest;
/**
 * GetFirstSegment - getting the amount of segments in maxSegments for very first playback
 */
- (NSString* _Nonnull)getFirstSegment:(NSString* _Nullable)localPath remotePath:(NSString* _Nullable)remotePath tmpPath:(NSString* _Nullable)tmpPath delay:(long)delay maxSegments:(long)maxSegments error:(NSError* _Nullable* _Nullable)error;
// skipped method StreamingService.PlayStreaming with unsupported parameter or return types

/**
 * TODO
 */
- (BOOL)stop:(NSError* _Nullable* _Nullable)error;
@end

@interface Zbox : NSObject
+ (NSError* _Nullable) errInvalidAllocation;
+ (void) setErrInvalidAllocation:(NSError* _Nullable)v;

@end

/**
 * CancelDownload - cancel file download

	## Inputs
	- allocationID
	- remotePath
 */
FOUNDATION_EXPORT BOOL ZboxCancelDownload(NSString* _Nullable allocationID, NSString* _Nullable remotepath, NSError* _Nullable* _Nullable error);

/**
 * CancelRepair - cancel repair files from path

	## Inputs
	- allocationID
 */
FOUNDATION_EXPORT BOOL ZboxCancelRepair(NSString* _Nullable allocationID, NSError* _Nullable* _Nullable error);

/**
 * CancelUpload - cancel file upload

	## Inputs
	- allocationID
	- localPath
 */
FOUNDATION_EXPORT BOOL ZboxCancelUpload(NSString* _Nullable allocationID, NSString* _Nullable localpath, NSError* _Nullable* _Nullable error);

/**
 * ConvertZcnTokenToETH - converting Zcn tokens to Eth
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxConvertZcnTokenToETH(double token, NSError* _Nullable* _Nullable error);

/**
 * CopyObject - copy object from path to dest
## Inputs
  - allocationID
  - path
  - destPath
 */
FOUNDATION_EXPORT BOOL ZboxCopyObject(NSString* _Nullable allocationID, NSString* _Nullable path, NSString* _Nullable destPath, NSError* _Nullable* _Nullable error);

/**
 * CreateDir create empty directoy on remote blobbers

	## Inputs
	- allocationID
	- dirName
 */
FOUNDATION_EXPORT BOOL ZboxCreateDir(NSString* _Nullable allocationID, NSString* _Nullable dirName, NSError* _Nullable* _Nullable error);

/**
 * CreateStreamingService - creating streaming service instance
 */
FOUNDATION_EXPORT id<ZboxStreamingImpl> _Nullable ZboxCreateStreamingService(ZboxAllocation* _Nullable allocation);

/**
 * Decrypt - decrypting text with key
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxDecrypt(NSString* _Nullable key, NSString* _Nullable text, NSError* _Nullable* _Nullable error);

/**
 * DeleteFile - delete file from remote path
## Inputs
  - allocationID
  - remotePath

## Outputs
 */
FOUNDATION_EXPORT BOOL ZboxDeleteFile(NSString* _Nullable allocationID, NSString* _Nullable remotePath, NSError* _Nullable* _Nullable error);

/**
 * DownloadFile - start download file from remote path to localpath
## Inputs
  - allocationID
  - remotePath
  - localPath: the full local path of file
  - statusCb: callback of status

## Outputs
  - error
 */
FOUNDATION_EXPORT BOOL ZboxDownloadFile(NSString* _Nullable allocationID, NSString* _Nullable remotePath, NSString* _Nullable localPath, id<ZboxStatusCallbackMocked> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * DownloadFileByBlock - start download file from remote path to localpath by blocks number
## Inputs

  - allocationID
  - remotePath
  - localPath
  - startBlock
  - endBlock
  - numBlocks
  - statusCb: callback of status

## Outputs

  - error
 */
FOUNDATION_EXPORT BOOL ZboxDownloadFileByBlock(NSString* _Nullable allocationID, NSString* _Nullable remotePath, NSString* _Nullable localPath, int64_t startBlock, int64_t endBlock, long numBlocks, id<ZboxStatusCallbackMocked> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * DownloadFromAuthTicket - download file from Auth ticket

	## Inputs
	- allocationID
	- localPath
	- authTicket
	- remoteLookupHash
	- remoteFilename
	- status: callback of status
 */
FOUNDATION_EXPORT BOOL ZboxDownloadFromAuthTicket(NSString* _Nullable allocationID, NSString* _Nullable localPath, NSString* _Nullable authTicket, NSString* _Nullable remoteLookupHash, NSString* _Nullable remoteFilename, id<ZboxStatusCallbackMocked> _Nullable status, NSError* _Nullable* _Nullable error);

/**
 * DownloadFromAuthTicketByBlocks - download file from Auth ticket by blocks number
## Inputs
  - allocationID
  - localPath
  - authTicket: the base64 string of *marker.AuthTicket
  - startBlock:
  - endBlock
  - numBlocks
  - remoteLookupHash
  - remoteFilename
  - status: callback of status
 */
FOUNDATION_EXPORT BOOL ZboxDownloadFromAuthTicketByBlocks(NSString* _Nullable allocationID, NSString* _Nullable localPath, NSString* _Nullable authTicket, int64_t startBlock, int64_t endBlock, long numBlocks, NSString* _Nullable remoteLookupHash, NSString* _Nullable remoteFilename, id<ZboxStatusCallbackMocked> _Nullable status, NSError* _Nullable* _Nullable error);

/**
 * DownloadThumbnail - start download file thumbnail from remote path to localpath
## Inputs
  - allocationID
  - remotePath
  - localPath
  - statusCb: callback of status

## Outputs
  - error
 */
FOUNDATION_EXPORT BOOL ZboxDownloadThumbnail(NSString* _Nullable allocationID, NSString* _Nullable remotePath, NSString* _Nullable localPath, id<ZboxStatusCallbackMocked> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * DownloadThumbnailFromAuthTicket - downloadThumbnail from Auth ticket
## Inputs
  - allocationID
  - localPath
  - authTicket: the base64 string of *marker.AuthTicket
  - remoteLookupHash
  - remoteFilename
  - status: callback of status
 */
FOUNDATION_EXPORT BOOL ZboxDownloadThumbnailFromAuthTicket(NSString* _Nullable allocationID, NSString* _Nullable localPath, NSString* _Nullable authTicket, NSString* _Nullable remoteLookupHash, NSString* _Nullable remoteFilename, id<ZboxStatusCallbackMocked> _Nullable status, NSError* _Nullable* _Nullable error);

/**
 * Encrypt - encrypting text with key
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxEncrypt(NSString* _Nullable key, NSString* _Nullable text, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZboxGEthToTokens(int64_t tokens);

/**
 * GetStatistics - get allocation stats
## Inputs
  - allocationID

## Outputs
- the json string of sdk.AllocationStats
- error
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetAllocationStats(NSString* _Nullable allocationID, NSError* _Nullable* _Nullable error);

/**
 * GetAuthToken - get auth token from refereeClientID
## Inputs
  - allocationID
  - path
  - fileName
  - referenceType: f: file, d: directory
  - refereeClientID
  - refereeEncryptionPublicKey
  - expiration:  seconds in unix time
  - availableAfter: seconds in unix time

## Outputs
  - the json string of *marker.AuthTicket
  - error
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetAuthToken(NSString* _Nullable allocationID, NSString* _Nullable path, NSString* _Nullable filename, NSString* _Nullable referenceType, NSString* _Nullable refereeClientID, NSString* _Nullable refereeEncryptionPublicKey, int64_t expiration, int64_t availableAfter, NSError* _Nullable* _Nullable error);

/**
 * GetBlobberStats - get blobbers stats
## Inputs
  - allocationID

## Outputs
  - the json string of map[string]*sdk.BlobberAllocationStats
  - error
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetBlobberStats(NSString* _Nullable allocationID, NSError* _Nullable* _Nullable error);

/**
 * GetBlobbers - get list of blobbers
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetBlobbers(NSError* _Nullable* _Nullable error);

/**
 * GetClientEncryptedPublicKey - getting client encrypted pub key
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetClientEncryptedPublicKey(NSError* _Nullable* _Nullable error);

/**
 * GetFileMeta - getting file meta details from file path
## Inputs
  - allocationID
  - remotePath

## Outputs

  - the json string of sdk.ConsolidatedFileMeta
  - error
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetFileMeta(NSString* _Nullable allocationID, NSString* _Nullable path, NSError* _Nullable* _Nullable error);

/**
 * GetFileMetaFromAuthTicket - getting file meta details from file path and auth ticket
## Inputs
  - allocationID
  - authTicket
  - lookupHash

## Outpus
  - the json string of sdk.ConsolidatedFileMeta
  - error
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetFileMetaFromAuthTicket(NSString* _Nullable allocationID, NSString* _Nullable authTicket, NSString* _Nullable lookupHash, NSError* _Nullable* _Nullable error);

/**
 * GetFileStats - get file stats from path
## Inputs
  - allocationID
  - path

## Outputs
  - the json string of map[string]*sdk.FileStats
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetFileStats(NSString* _Nullable allocationID, NSString* _Nullable path, NSError* _Nullable* _Nullable error);

/**
 * GetNetwork - get current network
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxGetNetwork(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT long ZboxGetNumber(NSString* _Nullable value);

/**
 * InitAuthTicket - init auth ticket from ID
 */
FOUNDATION_EXPORT ZboxAuthTicket* _Nullable ZboxInitAuthTicket(NSString* _Nullable authTicket);

/**
 * ListDir - listing files from path
## Inputs
  - allocatonID
  - remotePath

## Outputs
  - the json string of sdk.ListResult
  - error
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxListDir(NSString* _Nullable allocationID, NSString* _Nullable remotePath, NSError* _Nullable* _Nullable error);

/**
 * ListDirFromAuthTicket - listing files from path with auth ticket
## Inputs
  - allocatonID
  - authTicket
  - lookupHash

## Outputs
  - the json string of sdk.ListResult
  - error
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxListDirFromAuthTicket(NSString* _Nullable allocationID, NSString* _Nullable authTicket, NSString* _Nullable lookupHash, NSError* _Nullable* _Nullable error);

/**
 * MoveObject - move object from path to dest
## Inputs
  - allocationID
  - path
  - destPath
 */
FOUNDATION_EXPORT BOOL ZboxMoveObject(NSString* _Nullable allocationID, NSString* _Nullable path, NSString* _Nullable destPath, NSError* _Nullable* _Nullable error);

/**
 * NewMediaPlaylist create media playlist(.m3u8)
 */
FOUNDATION_EXPORT ZboxMediaPlaylist* _Nullable ZboxNewMediaPlaylist(long delay, id<ZboxM3u8Writer> _Nullable writer);

/**
 * RenameObject - rename or move file
## Inputs
  - allocationID
  - remotePath
  - destName

## Outputs
  - error
 */
FOUNDATION_EXPORT BOOL ZboxRenameObject(NSString* _Nullable allocationID, NSString* _Nullable remotePath, NSString* _Nullable destName, NSError* _Nullable* _Nullable error);

/**
 * RepairFile - repair file if it exists in remote path
## Inputs
  - allocationID
  - workdir: set a workdir as ~/.zcn on mobile apps
  - localPath: the local full path of file. eg /usr/local/files/zcn.png
  - remotePath:
  - thumbnailPath: the local full path of thumbnail
  - encrypt: the file should be ecnrypted or not on uploading
  - statusCb: callback of status

## Outputs
  - error
 */
FOUNDATION_EXPORT BOOL ZboxRepairFile(NSString* _Nullable allocationID, NSString* _Nullable workdir, NSString* _Nullable localPath, NSString* _Nullable remotePath, NSString* _Nullable thumbnailPath, BOOL encrypt, id<ZboxStatusCallbackMocked> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * Sign - sign hash
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxSign(NSString* _Nullable hash, NSError* _Nullable* _Nullable error);

/**
 * StartRepair - start repair files from path

	## Inputs
	- allocationID
	- localRootPath
	- pathToRepair
	- status: callback of status
 */
FOUNDATION_EXPORT BOOL ZboxStartRepair(NSString* _Nullable allocationID, NSString* _Nullable localRootPath, NSString* _Nullable pathToRepair, id<ZboxStatusCallbackMocked> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * SuggestEthGasPrice - return back suggested price for gas
 */
FOUNDATION_EXPORT NSString* _Nonnull ZboxSuggestEthGasPrice(NSError* _Nullable* _Nullable error);

// skipped function ToAllocation with unsupported parameter or return types


FOUNDATION_EXPORT NSString* _Nonnull ZboxTokensToEth(int64_t tokens);

/**
 * UploadFile - update file/thumbnail from local path to remote path
## Inputs
  - workdir: set a workdir as ~/.zcn on mobile apps
  - localPath: the local full path of file. eg /usr/local/files/zcn.png
  - remotePath:
  - thumbnailPath: the local full path of thumbnail
  - encrypt: the file should be ecnrypted or not on uploading
  - statusCb: callback of status

## Ouputs
  - error
 */
FOUNDATION_EXPORT BOOL ZboxUpdateFile(NSString* _Nullable allocationID, NSString* _Nullable workdir, NSString* _Nullable localPath, NSString* _Nullable remotePath, NSString* _Nullable thumbnailPath, BOOL encrypt, id<ZboxStatusCallbackMocked> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * UploadFile - upload file/thumbnail from local path to remote path
## Inputs
  - allocationID
  - workdir: set a workdir as ~/.zcn on mobile apps
  - localPath: the local full path of file. eg /usr/local/files/zcn.png
  - remotePath:
  - thumbnailPath: the local full path of thumbnail
  - encrypt: the file should be ecnrypted or not on uploading
  - statusCb: callback of status

## Outputs
  - error
 */
FOUNDATION_EXPORT BOOL ZboxUploadFile(NSString* _Nullable allocationID, NSString* _Nullable workdir, NSString* _Nullable localPath, NSString* _Nullable remotePath, NSString* _Nullable thumbnailPath, BOOL encrypt, id<ZboxStatusCallbackMocked> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * VerifySignatxure - verify message with signature
 */
FOUNDATION_EXPORT BOOL ZboxVerifySignature(NSString* _Nullable signature, NSString* _Nullable msg, BOOL* _Nullable ret0_, NSError* _Nullable* _Nullable error);

@class ZboxM3u8Writer;

@class ZboxStatusCallbackMocked;

@class ZboxStreamingImpl;

/**
 * M3u8Writer m3u8 writer
 */
@interface ZboxM3u8Writer : NSObject <goSeqRefInterface, ZboxM3u8Writer> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)seek:(int64_t)offset whence:(long)whence ret0_:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (BOOL)sync:(NSError* _Nullable* _Nullable)error;
- (BOOL)truncate:(int64_t)size error:(NSError* _Nullable* _Nullable)error;
- (BOOL)write:(NSData* _Nullable)p0 n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

@interface ZboxStatusCallbackMocked : NSObject <goSeqRefInterface, ZboxStatusCallbackMocked> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)commitMetaCompleted:(NSString* _Nullable)request response:(NSString* _Nullable)response err:(NSError* _Nullable)err;
- (void)completed:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath filename:(NSString* _Nullable)filename mimetype:(NSString* _Nullable)mimetype size:(long)size op:(long)op;
- (void)error:(NSString* _Nullable)allocationID filePath:(NSString* _Nullable)filePath op:(long)op err:(NSError* _Nullable)err;
- (void)inProgress:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath op:(long)op completedBytes:(long)completedBytes data:(NSData* _Nullable)data;
- (void)repairCompleted:(long)filesRepaired;
- (void)started:(NSString* _Nullable)allocationId filePath:(NSString* _Nullable)filePath op:(long)op totalBytes:(long)totalBytes;
@end

/**
 * StreamingService - implementation of streaming service
 */
@interface ZboxStreamingImpl : NSObject <goSeqRefInterface, ZboxStreamingImpl> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)getCurrentManifest;
- (NSString* _Nonnull)getFirstSegment:(NSString* _Nullable)localPath remotePath:(NSString* _Nullable)remotePath tmpPath:(NSString* _Nullable)tmpPath delay:(long)delay maxSegments:(long)maxSegments error:(NSError* _Nullable* _Nullable)error;
// skipped method StreamingImpl.PlayStreaming with unsupported parameter or return types

- (BOOL)stop:(NSError* _Nullable* _Nullable)error;
@end

#endif
