// Objective-C API for talking to github.com/0chain/gosdk/zcncore Go package.
//   gobind -lang=objc github.com/0chain/gosdk/zcncore
//
// File is generated by gobind. Do not edit.

#ifndef __Zcncore_H__
#define __Zcncore_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Common.objc.h"

@class ZcncoreAuthorizerConfig;
@class ZcncoreAuthorizerHealthCheckPayload;
@class ZcncoreAuthorizerStakePoolSettings;
@class ZcncoreBlock;
@class ZcncoreBlockHeader;
@class ZcncoreBurnTicket;
@class ZcncoreChainConfig;
@class ZcncoreCreateAllocationRequest;
@class ZcncoreGetClientResponse;
@class ZcncoreGetNonceCallbackStub;
@class ZcncoreHttpConsensusMaps;
@class ZcncoreMinerSCLock;
@class ZcncoreMinerSCUnlock;
@class ZcncoreNetwork;
@class ZcncoreQueryResult;
@class ZcncoreSendTxnData;
@class ZcncoreStakePoolSettings;
@class ZcncoreTerms;
@class ZcncoreTransaction;
@class ZcncoreTransactionMobile;
@class ZcncoreTransactionWithAuth;
@class ZcncoreTransactions;
@class ZcncoreVestingDest;
@class ZcncoreVestingStopRequest;
@protocol ZcncoreAddAuthorizerPayload;
@class ZcncoreAddAuthorizerPayload;
@protocol ZcncoreAuthCallback;
@class ZcncoreAuthCallback;
@protocol ZcncoreAuthorizerNode;
@class ZcncoreAuthorizerNode;
@protocol ZcncoreBlobber;
@class ZcncoreBlobber;
@protocol ZcncoreGetBalanceCallback;
@class ZcncoreGetBalanceCallback;
@protocol ZcncoreGetInfoCallback;
@class ZcncoreGetInfoCallback;
@protocol ZcncoreGetNonceCallback;
@class ZcncoreGetNonceCallback;
@protocol ZcncoreInputMap;
@class ZcncoreInputMap;
@protocol ZcncoreMSVote;
@class ZcncoreMSVote;
@protocol ZcncoreMinerSCMinerInfo;
@class ZcncoreMinerSCMinerInfo;
@protocol ZcncoreMultisigSCWallet;
@class ZcncoreMultisigSCWallet;
@protocol ZcncoreRequestTimeout;
@class ZcncoreRequestTimeout;
@protocol ZcncoreStringers;
@class ZcncoreStringers;
@protocol ZcncoreTransactionCallback;
@class ZcncoreTransactionCallback;
@protocol ZcncoreTransactionCommon;
@class ZcncoreTransactionCommon;
@protocol ZcncoreTransactionScheme;
@class ZcncoreTransactionScheme;
@protocol ZcncoreValidator;
@class ZcncoreValidator;
@protocol ZcncoreVestingAddRequest;
@class ZcncoreVestingAddRequest;
@protocol ZcncoreWallet;
@class ZcncoreWallet;
@protocol ZcncoreWalletCallback;
@class ZcncoreWalletCallback;

@protocol ZcncoreAddAuthorizerPayload <NSObject>
- (void)setStakePoolSettings:(NSString* _Nullable)delegateWallet minStake:(int64_t)minStake maxStake:(int64_t)maxStake numDelegates:(long)numDelegates serviceCharge:(double)serviceCharge;
@end

@protocol ZcncoreAuthCallback <NSObject>
/**
 * This call back gives the status of the Two factor authenticator(zauth) setup.
 */
- (void)onSetupComplete:(long)status err:(NSString* _Nullable)err;
@end

@protocol ZcncoreAuthorizerNode <NSObject>
- (NSString* _Nonnull)getID;
@end

@protocol ZcncoreBlobber <NSObject>
- (void)setAvailable:(BOOL)p0;
- (void)setStakePoolSettings:(NSString* _Nullable)delegateWallet minStake:(int64_t)minStake maxStake:(int64_t)maxStake numDelegates:(long)numDelegates serviceCharge:(double)serviceCharge;
- (void)setTerms:(int64_t)readPrice writePrice:(int64_t)writePrice minLockDemand:(double)minLockDemand maxOfferDuration:(int64_t)maxOfferDuration;
@end

@protocol ZcncoreGetBalanceCallback <NSObject>
- (void)onBalanceAvailable:(long)status value:(int64_t)value info:(NSString* _Nullable)info;
@end

@protocol ZcncoreGetInfoCallback <NSObject>
/**
 * OnInfoAvailable will be called when GetLockTokenConfig is complete
if status == StatusSuccess then info is valid
is status != StatusSuccess then err will give the reason
 */
- (void)onInfoAvailable:(long)op status:(long)status info:(NSString* _Nullable)info err:(NSString* _Nullable)err;
@end

@protocol ZcncoreGetNonceCallback <NSObject>
- (void)onNonceAvailable:(long)status nonce:(int64_t)nonce info:(NSString* _Nullable)info;
@end

@protocol ZcncoreInputMap <NSObject>
- (void)addField:(NSString* _Nullable)key value:(NSString* _Nullable)value;
@end

@protocol ZcncoreMSVote <NSObject>
- (NSString* _Nonnull)getProposalID;
- (NSString* _Nonnull)getSignature;
- (NSString* _Nonnull)getTransferAmount;
- (NSString* _Nonnull)getTransferClientID;
- (NSString* _Nonnull)getTransferToClientID;
@end

@protocol ZcncoreMinerSCMinerInfo <NSObject>
- (NSString* _Nonnull)getID;
@end

@protocol ZcncoreMultisigSCWallet <NSObject>
- (NSString* _Nonnull)getClientID;
- (long)getNumRequired;
- (NSString* _Nonnull)getPublicKey;
- (NSString* _Nonnull)getSignatureScheme;
- (id<ZcncoreStringers> _Nullable)getSignerPublicKeys;
- (id<ZcncoreStringers> _Nullable)getSignerThresholdIDs;
@end

@protocol ZcncoreRequestTimeout <NSObject>
- (int64_t)get;
- (void)set:(int64_t)p0;
@end

@protocol ZcncoreStringers <NSObject>
- (NSString* _Nonnull)get:(long)i error:(NSError* _Nullable* _Nullable)error;
- (long)len;
@end

@protocol ZcncoreTransactionCallback <NSObject>
- (void)onAuthComplete:(ZcncoreTransaction* _Nullable)t status:(long)status;
- (void)onTransactionComplete:(ZcncoreTransaction* _Nullable)t status:(long)status;
- (void)onVerifyComplete:(ZcncoreTransaction* _Nullable)t status:(long)status;
@end

@protocol ZcncoreTransactionCommon <NSObject>
- (BOOL)cancelAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createAllocation:(ZcncoreCreateAllocationRequest* _Nullable)car lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createReadPool:(NSError* _Nullable* _Nullable)error;
/**
 * ExecuteSmartContract implements wrapper for smart contract function
 */
- (BOOL)executeSmartContract:(NSString* _Nullable)address methodName:(NSString* _Nullable)methodName input:(NSString* _Nullable)input val:(NSString* _Nullable)val error:(NSError* _Nullable* _Nullable)error;
- (BOOL)faucetUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)finalizeAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (long)getVerifyConfirmationStatus;
- (BOOL)minerSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteMiner:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteSharder:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCMinerSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCSharderSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateGlobals:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)readPoolLock:(NSString* _Nullable)allocID blobberID:(NSString* _Nullable)blobberID duration:(int64_t)duration lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)readPoolUnlock:(NSError* _Nullable* _Nullable)error;
/**
 * Send implements sending token to a given clientid
 */
- (BOOL)send:(NSString* _Nullable)toClientID val:(NSString* _Nullable)val desc:(NSString* _Nullable)desc error:(NSError* _Nullable* _Nullable)error;
/**
 * SetTransactionFee implements method to set the transaction fee
 */
- (BOOL)setTransactionFee:(NSString* _Nullable)txnFee error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stakePoolLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stakePoolUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageScUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateAllocation:(NSString* _Nullable)allocID sizeDiff:(int64_t)sizeDiff expirationDiff:(int64_t)expirationDiff lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateBlobberSettings:(id<ZcncoreBlobber> _Nullable)blobber error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingAdd:(id<ZcncoreVestingAddRequest> _Nullable)ar value:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writePoolLock:(NSString* _Nullable)allocID lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writePoolUnlock:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
/**
 * ZCNSCAddAuthorizer adds authorizer
 */
- (BOOL)zcnscAddAuthorizer:(id<ZcncoreAddAuthorizerPayload> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
/**
 * ZCNSCUpdateAuthorizerConfig updates authorizer config by ID
 */
- (BOOL)zcnscUpdateAuthorizerConfig:(id<ZcncoreAuthorizerNode> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateGlobalConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ZcncoreTransactionScheme <NSObject>
- (BOOL)cancelAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createAllocation:(ZcncoreCreateAllocationRequest* _Nullable)car lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createReadPool:(NSError* _Nullable* _Nullable)error;
/**
 * ExecuteFaucetSCWallet implements the `Faucet Smart contract` for a given wallet
 */
- (BOOL)executeFaucetSCWallet:(NSString* _Nullable)walletStr methodName:(NSString* _Nullable)methodName input:(NSData* _Nullable)input error:(NSError* _Nullable* _Nullable)error;
- (BOOL)executeSmartContract:(NSString* _Nullable)address methodName:(NSString* _Nullable)methodName input:(NSString* _Nullable)input val:(NSString* _Nullable)val error:(NSError* _Nullable* _Nullable)error;
- (BOOL)faucetUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)finalizeAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionError implements error string in case of transaction failure
 */
- (NSString* _Nonnull)getTransactionError;
/**
 * GetTransactionHash implements retrieval of hash of the submitted transaction
 */
- (NSString* _Nonnull)getTransactionHash;
/**
 * GetTransactionNonce returns nonce
 */
- (int64_t)getTransactionNonce;
- (long)getVerifyConfirmationStatus;
/**
 * GetVerifyError implements error string in case of verify failure error
 */
- (NSString* _Nonnull)getVerifyError;
/**
 * GetVerifyOutput implements the verification output from sharders
 */
- (NSString* _Nonnull)getVerifyOutput;
/**
 * Hash Transaction status regardless of status
 */
- (NSString* _Nonnull)hash;
- (BOOL)minerSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteMiner:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteSharder:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCMinerSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCSharderSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateGlobals:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
/**
 * Output of transaction.
 */
- (NSData* _Nullable)output;
- (BOOL)readPoolLock:(NSString* _Nullable)allocID blobberID:(NSString* _Nullable)blobberID duration:(int64_t)duration lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)readPoolUnlock:(NSError* _Nullable* _Nullable)error;
- (BOOL)send:(NSString* _Nullable)toClientID val:(NSString* _Nullable)val desc:(NSString* _Nullable)desc error:(NSError* _Nullable* _Nullable)error;
/**
 * SetTransactionCallback implements storing the callback
used to call after the transaction or verification is completed
 */
- (BOOL)setTransactionCallback:(id<ZcncoreTransactionCallback> _Nullable)cb error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionFee:(NSString* _Nullable)txnFee error:(NSError* _Nullable* _Nullable)error;
/**
 * SetTransactionHash implements verify a previous transaction status
 */
- (BOOL)setTransactionHash:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SetTransactionNonce implements method to set the transaction nonce
 */
- (BOOL)setTransactionNonce:(int64_t)txnNonce error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stakePoolLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stakePoolUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageScUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
/**
 * StoreData implements store the data to blockchain
 */
- (BOOL)storeData:(NSString* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateAllocation:(NSString* _Nullable)allocID sizeDiff:(int64_t)sizeDiff expirationDiff:(int64_t)expirationDiff lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateBlobberSettings:(id<ZcncoreBlobber> _Nullable)blobber error:(NSError* _Nullable* _Nullable)error;
/**
 * Verify implements verify the transaction
 */
- (BOOL)verify:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingAdd:(id<ZcncoreVestingAddRequest> _Nullable)ar value:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingDelete:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingStop:(ZcncoreVestingStopRequest* _Nullable)sr error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingTrigger:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUnlock:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writePoolLock:(NSString* _Nullable)allocID lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writePoolUnlock:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscAddAuthorizer:(id<ZcncoreAddAuthorizerPayload> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateAuthorizerConfig:(id<ZcncoreAuthorizerNode> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateGlobalConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ZcncoreValidator <NSObject>
- (void)setStakePoolSettings:(NSString* _Nullable)delegateWallet minStake:(int64_t)minStake maxStake:(int64_t)maxStake numDelegates:(long)numDelegates serviceCharge:(double)serviceCharge;
@end

@protocol ZcncoreVestingAddRequest <NSObject>
- (void)addDestinations:(NSString* _Nullable)id_ amount:(int64_t)amount;
@end

@protocol ZcncoreWallet <NSObject>
- (NSString* _Nonnull)sign:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
@end

@protocol ZcncoreWalletCallback <NSObject>
- (void)onWalletCreateComplete:(long)status wallet:(NSString* _Nullable)wallet err:(NSString* _Nullable)err;
@end

@interface ZcncoreAuthorizerConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) int64_t fee;
@end

@interface ZcncoreAuthorizerHealthCheckPayload : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
@end

@interface ZcncoreAuthorizerStakePoolSettings : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull delegateWallet;
@property (nonatomic) int64_t minStake;
@property (nonatomic) int64_t maxStake;
@property (nonatomic) long numDelegates;
@property (nonatomic) double serviceCharge;
@end

@interface ZcncoreBlock : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull minerID;
@property (nonatomic) int64_t round;
@property (nonatomic) int64_t roundRandomSeed;
@property (nonatomic) long roundTimeoutCount;
@property (nonatomic) NSString* _Nonnull hash;
@property (nonatomic) NSString* _Nonnull signature;
@property (nonatomic) NSString* _Nonnull chainID;
@property (nonatomic) double chainWeight;
@property (nonatomic) int64_t runningTxnCount;
@property (nonatomic) NSString* _Nonnull version;
@property (nonatomic) int64_t creationDate;
@property (nonatomic) NSString* _Nonnull magicBlockHash;
@property (nonatomic) NSString* _Nonnull prevHash;
@property (nonatomic) NSString* _Nonnull clientStateHash;
- (ZcncoreBlockHeader* _Nullable)getHeader;
- (ZcncoreTransactions* _Nullable)getTxns;
@end

@interface ZcncoreBlockHeader : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull version;
@property (nonatomic) int64_t creationDate;
@property (nonatomic) NSString* _Nonnull hash;
@property (nonatomic) NSString* _Nonnull minerID;
@property (nonatomic) int64_t round;
@property (nonatomic) int64_t roundRandomSeed;
@property (nonatomic) NSString* _Nonnull merkleTreeRoot;
@property (nonatomic) NSString* _Nonnull stateHash;
@property (nonatomic) NSString* _Nonnull receiptMerkleTreeRoot;
@property (nonatomic) int64_t numTxns;
@end

/**
 * BurnTicket model used for deserialization of the response received from sharders
 */
@interface ZcncoreBurnTicket : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull hash;
@property (nonatomic) int64_t nonce;
@end

@interface ZcncoreChainConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull chainID;
@property (nonatomic) NSString* _Nonnull blockWorker;
// skipped field ChainConfig.Miners with unsupported type: []string

// skipped field ChainConfig.Sharders with unsupported type: []string

@property (nonatomic) NSString* _Nonnull signatureScheme;
@property (nonatomic) long minSubmit;
@property (nonatomic) long minConfirmation;
@property (nonatomic) long confirmationChainLength;
@property (nonatomic) NSString* _Nonnull ethNode;
@end

@interface ZcncoreCreateAllocationRequest : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) long dataShards;
@property (nonatomic) long parityShards;
@property (nonatomic) int64_t size;
@property (nonatomic) int64_t expiration;
@property (nonatomic) NSString* _Nonnull owner;
@property (nonatomic) NSString* _Nonnull ownerPublicKey;
@property (nonatomic) int64_t readPriceMin;
@property (nonatomic) int64_t readPriceMax;
@property (nonatomic) int64_t writePriceMin;
@property (nonatomic) int64_t writePriceMax;
- (void)addBlobber:(NSString* _Nullable)blobber;
@end

@interface ZcncoreGetClientResponse : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
@property (nonatomic) NSString* _Nonnull version;
@property (nonatomic) long creationDate;
@property (nonatomic) NSString* _Nonnull publicKey;
@end

@interface ZcncoreGetNonceCallbackStub : NSObject <goSeqRefInterface, ZcncoreGetNonceCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (void)onNonceAvailable:(long)status nonce:(int64_t)nonce info:(NSString* _Nullable)info;
@end

@interface ZcncoreHttpConsensusMaps : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init:(long)consensusThresh;
@property (nonatomic) long consensusThresh;
@property (nonatomic) long maxConsensus;
// skipped field HttpConsensusMaps.WinMap with unsupported type: map[string]encoding/json.RawMessage

// skipped field HttpConsensusMaps.WinMapConsensus with unsupported type: map[string]int

@property (nonatomic) NSString* _Nonnull winError;
@property (nonatomic) NSString* _Nonnull winInfo;
- (BOOL)add:(long)statusCode respBody:(NSString* _Nullable)respBody error:(NSError* _Nullable* _Nullable)error;
// skipped method HttpConsensusMaps.GetValue with unsupported parameter or return types

@end

@interface ZcncoreMinerSCLock : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
@end

@interface ZcncoreMinerSCUnlock : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
@end

@interface ZcncoreNetwork : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nullable instancetype)init;
- (void)addMiner:(NSString* _Nullable)miner;
- (void)addSharder:(NSString* _Nullable)sharder;
@end

@interface ZcncoreQueryResult : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable content;
@property (nonatomic) long statusCode;
@property (nonatomic) NSError* _Nullable error;
@end

@interface ZcncoreSendTxnData : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull note;
@end

@interface ZcncoreStakePoolSettings : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull delegateWallet;
@property (nonatomic) int64_t minStake;
@property (nonatomic) int64_t maxStake;
@property (nonatomic) long numDelegates;
@property (nonatomic) double serviceCharge;
@end

@interface ZcncoreTerms : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) int64_t readPrice;
@property (nonatomic) int64_t writePrice;
@property (nonatomic) double minLockDemand;
@property (nonatomic) int64_t maxOfferDuration;
@end

@interface ZcncoreTransaction : NSObject <goSeqRefInterface, ZcncoreTransactionCommon, ZcncoreTransactionScheme> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * CancelAllocation transaction.
 */
- (BOOL)cancelAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
/**
 * CreateAllocation transaction.
 */
- (BOOL)createAllocation:(ZcncoreCreateAllocationRequest* _Nullable)car lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * CreateReadPool for current user.
 */
- (BOOL)createReadPool:(NSError* _Nullable* _Nullable)error;
/**
 * ExecuteFaucetSCWallet implements the Faucet Smart contract for a given wallet
 */
- (BOOL)executeFaucetSCWallet:(NSString* _Nullable)walletStr methodName:(NSString* _Nullable)methodName input:(NSData* _Nullable)input error:(NSError* _Nullable* _Nullable)error;
- (BOOL)executeSmartContract:(NSString* _Nullable)address methodName:(NSString* _Nullable)methodName input:(NSString* _Nullable)input val:(NSString* _Nullable)val error:(NSError* _Nullable* _Nullable)error;
- (BOOL)faucetUpdateConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
/**
 * FinalizeAllocation transaction.
 */
- (BOOL)finalizeAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getTransactionError;
- (NSString* _Nonnull)getTransactionHash;
/**
 * GetTransactionNonce returns nonce
 */
- (int64_t)getTransactionNonce;
- (long)getVerifyConfirmationStatus;
- (NSString* _Nonnull)getVerifyError;
- (NSString* _Nonnull)getVerifyOutput;
- (NSString* _Nonnull)hash;
- (BOOL)minerSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteMiner:(id<ZcncoreMinerSCMinerInfo> _Nullable)info error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteSharder:(id<ZcncoreMinerSCMinerInfo> _Nullable)info error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCMinerSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)info error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCSharderSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)info error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateGlobals:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)output;
/**
 * ReadPoolLock locks tokens for current user and given allocation, using given
duration. If blobberID is not empty, then tokens will be locked for given
allocation->blobber only.
 */
- (BOOL)readPoolLock:(NSString* _Nullable)allocID blobberID:(NSString* _Nullable)blobberID duration:(int64_t)duration lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * ReadPoolUnlock for current user and given pool.
 */
- (BOOL)readPoolUnlock:(NSError* _Nullable* _Nullable)error;
- (BOOL)send:(NSString* _Nullable)toClientID val:(NSString* _Nullable)val desc:(NSString* _Nullable)desc error:(NSError* _Nullable* _Nullable)error;
- (BOOL)sendWithSignatureHash:(NSString* _Nullable)toClientID val:(NSString* _Nullable)val desc:(NSString* _Nullable)desc sig:(NSString* _Nullable)sig CreationDate:(int64_t)CreationDate hash:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionCallback:(id<ZcncoreTransactionCallback> _Nullable)cb error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionFee:(NSString* _Nullable)txnFee error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionHash:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionNonce:(int64_t)txnNonce error:(NSError* _Nullable* _Nullable)error;
/**
 * StakePoolLock used to lock tokens in a stake pool of a blobber.
 */
- (BOOL)stakePoolLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * StakePoolUnlock by blobberID
 */
- (BOOL)stakePoolUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageScUpdateConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storeData:(NSString* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateAllocation transaction.
 */
- (BOOL)updateAllocation:(NSString* _Nullable)allocID sizeDiff:(int64_t)sizeDiff expirationDiff:(int64_t)expirationDiff lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateBlobberSettings update settings of a blobber.
 */
- (BOOL)updateBlobberSettings:(id<ZcncoreBlobber> _Nullable)b error:(NSError* _Nullable* _Nullable)error;
- (BOOL)verify:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingAdd:(id<ZcncoreVestingAddRequest> _Nullable)ar value:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingDelete:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingStop:(ZcncoreVestingStopRequest* _Nullable)sr error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingTrigger:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUnlock:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUpdateConfig:(id<ZcncoreInputMap> _Nullable)vscc error:(NSError* _Nullable* _Nullable)error;
/**
 * WritePoolLock locks tokens for current user and given allocation, using given
duration. If blobberID is not empty, then tokens will be locked for given
allocation->blobber only.
 */
- (BOOL)writePoolLock:(NSString* _Nullable)allocID lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * WritePoolUnlock for current user and given pool.
 */
- (BOOL)writePoolUnlock:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscAddAuthorizer:(id<ZcncoreAddAuthorizerPayload> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateAuthorizerConfig:(id<ZcncoreAuthorizerNode> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateGlobalConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * TransactionMobile entity that encapsulates the transaction related data and meta data
 */
@interface ZcncoreTransactionMobile : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull hash;
@property (nonatomic) NSString* _Nonnull version;
@property (nonatomic) NSString* _Nonnull clientID;
@property (nonatomic) NSString* _Nonnull publicKey;
@property (nonatomic) NSString* _Nonnull toClientID;
@property (nonatomic) NSString* _Nonnull chainID;
@property (nonatomic) NSString* _Nonnull transactionData;
@property (nonatomic) NSString* _Nonnull value;
@property (nonatomic) NSString* _Nonnull signature;
@property (nonatomic) int64_t creationDate;
@property (nonatomic) long transactionType;
@property (nonatomic) NSString* _Nonnull transactionOutput;
@property (nonatomic) NSString* _Nonnull transactionFee;
@property (nonatomic) int64_t transactionNonce;
@property (nonatomic) NSString* _Nonnull outputHash;
@property (nonatomic) long status;
@end

@interface ZcncoreTransactionWithAuth : NSObject <goSeqRefInterface, ZcncoreTransactionCommon, ZcncoreTransactionScheme> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) ZcncoreTransaction* _Nullable transaction;
/**
 * CancelAllocation transaction.
 */
- (BOOL)cancelAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
/**
 * CreateAllocation transaction.
 */
- (BOOL)createAllocation:(ZcncoreCreateAllocationRequest* _Nullable)car lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * CreateReadPool for current user.
 */
- (BOOL)createReadPool:(NSError* _Nullable* _Nullable)error;
/**
 * ExecuteFaucetSCWallet impements the Faucet Smart contract for a given wallet
 */
- (BOOL)executeFaucetSCWallet:(NSString* _Nullable)walletStr methodName:(NSString* _Nullable)methodName input:(NSData* _Nullable)input error:(NSError* _Nullable* _Nullable)error;
- (BOOL)executeSmartContract:(NSString* _Nullable)address methodName:(NSString* _Nullable)methodName input:(NSString* _Nullable)input val:(NSString* _Nullable)val error:(NSError* _Nullable* _Nullable)error;
- (BOOL)faucetUpdateConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
/**
 * FinalizeAllocation transaction.
 */
- (BOOL)finalizeAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (NSString* _Nonnull)getTransactionError;
- (NSString* _Nonnull)getTransactionHash;
/**
 * GetTransactionNonce returns nonce
 */
- (int64_t)getTransactionNonce;
- (long)getVerifyConfirmationStatus;
- (NSString* _Nonnull)getVerifyError;
- (NSString* _Nonnull)getVerifyOutput;
- (NSString* _Nonnull)hash;
- (BOOL)minerSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteMiner:(id<ZcncoreMinerSCMinerInfo> _Nullable)info error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteSharder:(id<ZcncoreMinerSCMinerInfo> _Nullable)info error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCMinerSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)info error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCSharderSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)info error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateGlobals:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)output;
/**
 * ReadPoolLock locks tokens for current user and given allocation, using given
duration. If blobberID is not empty, then tokens will be locked for given
allocation->blobber only.
 */
- (BOOL)readPoolLock:(NSString* _Nullable)allocID blobberID:(NSString* _Nullable)blobberID duration:(int64_t)duration lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * ReadPoolUnlock for current user and given pool.
 */
- (BOOL)readPoolUnlock:(NSError* _Nullable* _Nullable)error;
/**
 * RegisterMultiSig register a multisig wallet with the SC.
 */
- (BOOL)registerMultiSig:(NSString* _Nullable)walletstr mswallet:(NSString* _Nullable)mswallet error:(NSError* _Nullable* _Nullable)error;
- (BOOL)send:(NSString* _Nullable)toClientID val:(NSString* _Nullable)val desc:(NSString* _Nullable)desc error:(NSError* _Nullable* _Nullable)error;
- (BOOL)sendWithSignatureHash:(NSString* _Nullable)toClientID val:(NSString* _Nullable)val desc:(NSString* _Nullable)desc sig:(NSString* _Nullable)sig CreationDate:(int64_t)CreationDate hash:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionCallback:(id<ZcncoreTransactionCallback> _Nullable)cb error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionFee:(NSString* _Nullable)txnFee error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionHash:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionNonce:(int64_t)txnNonce error:(NSError* _Nullable* _Nullable)error;
/**
 * StakePoolLock used to lock tokens in a stake pool of a blobber.
 */
- (BOOL)stakePoolLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * StakePoolUnlock by blobberID
 */
- (BOOL)stakePoolUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageScUpdateConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storeData:(NSString* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateAllocation transaction.
 */
- (BOOL)updateAllocation:(NSString* _Nullable)allocID sizeDiff:(int64_t)sizeDiff expirationDiff:(int64_t)expirationDiff lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateBlobberSettings update settings of a blobber.
 */
- (BOOL)updateBlobberSettings:(id<ZcncoreBlobber> _Nullable)blob error:(NSError* _Nullable* _Nullable)error;
- (BOOL)verify:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingAdd:(id<ZcncoreVestingAddRequest> _Nullable)ar value:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingDelete:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingStop:(ZcncoreVestingStopRequest* _Nullable)sr error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingTrigger:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUnlock:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUpdateConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
/**
 * WritePoolLock locks tokens for current user and given allocation, using given
duration. If blobberID is not empty, then tokens will be locked for given
allocation->blobber only.
 */
- (BOOL)writePoolLock:(NSString* _Nullable)allocID lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
/**
 * WritePoolUnlock for current user and given pool.
 */
- (BOOL)writePoolUnlock:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscAddAuthorizer:(id<ZcncoreAddAuthorizerPayload> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscAuthorizerHealthCheck:(ZcncoreAuthorizerHealthCheckPayload* _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateAuthorizerConfig:(id<ZcncoreAuthorizerNode> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateGlobalConfig:(id<ZcncoreInputMap> _Nullable)ip error:(NSError* _Nullable* _Nullable)error;
@end

@interface ZcncoreTransactions : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (ZcncoreTransactionMobile* _Nullable)get:(long)idx error:(NSError* _Nullable* _Nullable)error;
- (long)len;
@end

@interface ZcncoreVestingDest : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
@property (nonatomic) int64_t amount;
@end

@interface ZcncoreVestingStopRequest : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull poolID;
@property (nonatomic) NSString* _Nonnull destination;
@end

FOUNDATION_EXPORT const long ZcncoreChargeableError;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreFAUCETSC_PFX;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreFaucetSmartContractAddress;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_BALANCE;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_BLOCK_INFO;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_CHAIN_STATS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_CLIENT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_FAUCETSC_CONFIG;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_FEE_STATS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_LATEST_FINALIZED;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_LATEST_FINALIZED_MAGIC_BLOCK;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MAGIC_BLOCK_INFO;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINERSC_CONFIG;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINERSC_EVENTS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINERSC_GLOBALS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINERSC_MINERS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINERSC_NODE;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINERSC_POOL;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINERSC_SHARDERS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINERSC_USER;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_MINT_NONCE;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_NOT_PROCESSED_BURN_TICKETS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_VESTING_CLIENT_POOLS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_VESTING_CONFIG;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreGET_VESTING_POOL_INFO;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreMINERSC_PFX;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreMinerSmartContractAddress;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreMultiSigRegisterFuncName;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreMultiSigSmartContractAddress;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreMultiSigVoteFuncName;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreNETWORK_ENDPOINT;
FOUNDATION_EXPORT const long ZcncoreOpGetLockedTokens;
FOUNDATION_EXPORT const long ZcncoreOpGetMintNonce;
FOUNDATION_EXPORT const long ZcncoreOpGetNotProcessedBurnTickets;
FOUNDATION_EXPORT const long ZcncoreOpGetTokenLockConfig;
FOUNDATION_EXPORT const long ZcncoreOpGetUserPoolDetail;
FOUNDATION_EXPORT const long ZcncoreOpGetUserPools;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetAllocation;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetAllocations;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetAuthorizerSnapshots;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetBlobber;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetBlobberSnapshots;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetBlobbers;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetChallengePoolInfo;
/**
 * storage SC ops
 */
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetConfig;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetMinerSnapshots;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetReadPoolInfo;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetSharderSnapshots;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetSnapshots;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetStakePoolInfo;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetTransactions;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetUserSnapshots;
FOUNDATION_EXPORT const long ZcncoreOpStorageSCGetValidatorSnapshots;
FOUNDATION_EXPORT const long ZcncoreOpZCNSCGetAuthorizer;
FOUNDATION_EXPORT const long ZcncoreOpZCNSCGetAuthorizerNodes;
FOUNDATION_EXPORT const long ZcncoreOpZCNSCGetGlobalConfig;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncorePUT_TRANSACTION;
// skipped const ProviderAuthorizer with unsupported type: github.com/0chain/gosdk/zcncore.Provider

// skipped const ProviderBlobber with unsupported type: github.com/0chain/gosdk/zcncore.Provider

// skipped const ProviderMiner with unsupported type: github.com/0chain/gosdk/zcncore.Provider

// skipped const ProviderSharder with unsupported type: github.com/0chain/gosdk/zcncore.Provider

// skipped const ProviderValidator with unsupported type: github.com/0chain/gosdk/zcncore.Provider

FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreREGISTER_CLIENT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_ALLOCATION;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_ALLOCATIONS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_BLOBBER;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_BLOBBERS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_CHALLENGE_POOL_INFO;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_READ_POOL_INFO;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_SC_CONFIG;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_STAKE_POOL_INFO;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_STAKE_POOL_USER_INFO;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_TRANSACTIONS;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_GET_USER_LOCKED_TOTAL;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGESC_PFX;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGE_GET_AUTHORIZER_SNAPSHOT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGE_GET_BLOBBER_SNAPSHOT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGE_GET_MINER_SNAPSHOT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGE_GET_SHARDER_SNAPSHOT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGE_GET_SNAPSHOT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGE_GET_USER_SNAPSHOT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSTORAGE_GET_VALIDATOR_SNAPSHOT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreSharderEndpointHealthCheck;
FOUNDATION_EXPORT const long ZcncoreStatusAuthError;
FOUNDATION_EXPORT const long ZcncoreStatusAuthTimeout;
FOUNDATION_EXPORT const long ZcncoreStatusAuthVerifyFailed;
/**
 * TODO: Change to specific error
 */
FOUNDATION_EXPORT const long ZcncoreStatusError;
FOUNDATION_EXPORT const long ZcncoreStatusInvalidSignature;
FOUNDATION_EXPORT const long ZcncoreStatusNetworkError;
FOUNDATION_EXPORT const long ZcncoreStatusRejectedByUser;
FOUNDATION_EXPORT const long ZcncoreStatusSuccess;
FOUNDATION_EXPORT const long ZcncoreStatusUnknown;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreStorageSmartContractAddress;
FOUNDATION_EXPORT const long ZcncoreSuccess;
FOUNDATION_EXPORT const int64_t ZcncoreTOKEN_UNIT;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreTXN_VERIFY_URL;
FOUNDATION_EXPORT const long ZcncoreUndefined;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreVESTINGSC_PFX;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreVestingSmartContractAddress;
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreZCNSCSmartContractAddress;
/**
 * zcn sc
 */
FOUNDATION_EXPORT NSString* _Nonnull const ZcncoreZCNSC_PFX;

@interface Zcncore : NSObject
+ (NSError* _Nullable) errInvalidConsensus;
+ (void) setErrInvalidConsensus:(NSError* _Nullable)v;

+ (NSError* _Nullable) errInvalidNumSharder;
+ (void) setErrInvalidNumSharder:(NSError* _Nullable)v;

+ (NSError* _Nullable) errNilHttpConsensusMaps;
+ (void) setErrNilHttpConsensusMaps:(NSError* _Nullable)v;

+ (NSError* _Nullable) errNoAvailableSharders;
+ (void) setErrNoAvailableSharders:(NSError* _Nullable)v;

+ (NSError* _Nullable) errNoEnoughOnlineSharders;
+ (void) setErrNoEnoughOnlineSharders:(NSError* _Nullable)v;

+ (NSError* _Nullable) errNoEnoughSharders;
+ (void) setErrNoEnoughSharders:(NSError* _Nullable)v;

+ (NSError* _Nullable) errNoOnlineSharders;
+ (void) setErrNoOnlineSharders:(NSError* _Nullable)v;

+ (NSError* _Nullable) errSharderOffline;
+ (void) setErrSharderOffline:(NSError* _Nullable)v;

+ (NSError* _Nullable) errTransactionNotConfirmed;
+ (void) setErrTransactionNotConfirmed:(NSError* _Nullable)v;

+ (NSError* _Nullable) errTransactionNotFound;
+ (void) setErrTransactionNotFound:(NSError* _Nullable)v;

// skipped variable SignFn with unsupported type: func(hash string) (string, error)

@end

FOUNDATION_EXPORT BOOL ZcncoreCheckConfig(NSError* _Nullable* _Nullable error);

/**
 * CheckEthHashStatus - checking the status of ETH transaction
possible values 0 or 1
 */
FOUNDATION_EXPORT long ZcncoreCheckEthHashStatus(NSString* _Nullable hash);

/**
 * CloseLog closes log file
 */
FOUNDATION_EXPORT void ZcncoreCloseLog(void);

/**
 * ConvertToToken converts the SAS tokens to ZCN tokens
# Inputs
  - token: SAS tokens
 */
FOUNDATION_EXPORT double ZcncoreConvertToToken(int64_t token);

/**
 * ConvertToValue converts ZCN tokens to SAS tokens with string format
# Inputs
  - token: ZCN tokens
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreConvertToValue(double token);

// skipped function ConvertTokenToSAS with unsupported parameter or return types


FOUNDATION_EXPORT BOOL ZcncoreConvertTokenToUSD(double token, double* _Nullable ret0_, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL ZcncoreConvertUSDToToken(double usd, double* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * ConvertZcnTokenToETH - converting Zcn tokens to Eth
 */
FOUNDATION_EXPORT BOOL ZcncoreConvertZcnTokenToETH(double f, double* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * CreateMSVote create a vote for multisig
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreCreateMSVote(NSString* _Nullable proposal, NSString* _Nullable grpClientID, NSString* _Nullable signerWalletstr, NSString* _Nullable toClientID, NSString* _Nullable tokenStr, NSError* _Nullable* _Nullable error);

/**
 * CreateWallet creates the wallet for to configure signature scheme.
It also registers the wallet again to blockchain.
 */
FOUNDATION_EXPORT BOOL ZcncoreCreateWallet(id<ZcncoreWalletCallback> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * CreateWalletFromEthMnemonic - creating new wallet from Eth mnemonics
 */
FOUNDATION_EXPORT BOOL ZcncoreCreateWalletFromEthMnemonic(NSString* _Nullable mnemonic, NSString* _Nullable password, id<ZcncoreWalletCallback> _Nullable statusCb, NSError* _Nullable* _Nullable error);

/**
 * CreateWalletOffline creates the wallet for the config signature scheme.
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreCreateWalletOffline(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZcncoreCryptoJsDecrypt(NSString* _Nullable passphrase, NSString* _Nullable encryptedMessage, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZcncoreCryptoJsEncrypt(NSString* _Nullable passphrase, NSString* _Nullable message, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZcncoreDecrypt(NSString* _Nullable key, NSString* _Nullable text, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZcncoreEncrypt(NSString* _Nullable key, NSString* _Nullable text, NSError* _Nullable* _Nullable error);

/**
 * TokensToEth - converting eth tokens to wei
 */
FOUNDATION_EXPORT int64_t ZcncoreEthToTokens(double tokens);

FOUNDATION_EXPORT int64_t ZcncoreGEthToTokens(double gwei);

FOUNDATION_EXPORT double ZcncoreGTokensToEth(int64_t tokens);

/**
 * GetAllocation obtains allocation information.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetAllocation(NSString* _Nullable allocID, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetAllocations obtains list of allocations of a user.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetAllocations(NSString* _Nullable clientID, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetAuthorizerSnapshots obtains list of allocations of an authorizer.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetAuthorizerSnapshots(int64_t round, int64_t limit, int64_t offset, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetBalance retrieve wallet balance from sharders

	# Inputs
	-	cb: callback for checking result
 */
FOUNDATION_EXPORT BOOL ZcncoreGetBalance(id<ZcncoreGetBalanceCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetBalanceWallet retreives wallet balance from sharders
 */
FOUNDATION_EXPORT BOOL ZcncoreGetBalanceWallet(NSString* _Nullable walletStr, id<ZcncoreGetBalanceCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetBlobber obtains blobber information.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetBlobber(NSString* _Nullable blobberID, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetBlobberSnapshots obtains list of allocations of a blobber.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetBlobberSnapshots(int64_t round, int64_t limit, int64_t offset, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetBlobbers obtains list of all active blobbers.
# Inputs
  - cb: callback for checking result
  - limit: how many blobbers should be fetched
  - offset: how many blobbers should be skipped
  - active: only fetch active blobbers
 */
FOUNDATION_EXPORT void ZcncoreGetBlobbers(id<ZcncoreGetInfoCallback> _Nullable cb, long limit, long offset, BOOL active);

FOUNDATION_EXPORT ZcncoreBlock* _Nullable ZcncoreGetBlockByRound(long numSharders, int64_t round, id<ZcncoreRequestTimeout> _Nullable timeout, NSError* _Nullable* _Nullable error);

/**
 * GetChainStats gets chain stats with time out
timeout in milliseconds
 */
FOUNDATION_EXPORT NSData* _Nullable ZcncoreGetChainStats(id<ZcncoreRequestTimeout> _Nullable timeout, NSError* _Nullable* _Nullable error);

/**
 * GetChallengePoolInfo obtains challenge pool information for an allocation.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetChallengePoolInfo(NSString* _Nullable allocID, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT ZcncoreGetClientResponse* _Nullable ZcncoreGetClientDetails(NSString* _Nullable clientID, NSError* _Nullable* _Nullable error);

/**
 * GetEthBalance - getting back balance for ETH wallet
 */
FOUNDATION_EXPORT BOOL ZcncoreGetEthBalance(NSString* _Nullable ethAddr, id<ZcncoreGetBalanceCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable ZcncoreGetFeeStats(id<ZcncoreRequestTimeout> _Nullable timeout, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZcncoreGetIdForUrl(NSString* _Nullable url);

FOUNDATION_EXPORT void ZcncoreGetInfoFromAnySharder(NSString* _Nullable urlSuffix, long op, id<ZcncoreGetInfoCallback> _Nullable cb);

FOUNDATION_EXPORT void ZcncoreGetInfoFromSharders(NSString* _Nullable urlSuffix, long op, id<ZcncoreGetInfoCallback> _Nullable cb);

FOUNDATION_EXPORT ZcncoreBlockHeader* _Nullable ZcncoreGetLatestFinalized(long numSharders, id<ZcncoreRequestTimeout> _Nullable timeout, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable ZcncoreGetLatestFinalizedMagicBlock(long numSharders, id<ZcncoreRequestTimeout> _Nullable timeout, NSError* _Nullable* _Nullable error);

// skipped function GetLogger with unsupported parameter or return types


FOUNDATION_EXPORT NSData* _Nullable ZcncoreGetMagicBlockByNumber(long numSharders, int64_t number, id<ZcncoreRequestTimeout> _Nullable timeout, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT long ZcncoreGetMinShardersVerify(void);

FOUNDATION_EXPORT BOOL ZcncoreGetMinerSCConfig(id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL ZcncoreGetMinerSCGlobals(id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetMinerSCNodeInfo get miner information from sharders
# Inputs
  - id: the id of miner
  - cb: callback for checking result
 */
FOUNDATION_EXPORT BOOL ZcncoreGetMinerSCNodeInfo(NSString* _Nullable id_, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL ZcncoreGetMinerSCNodePool(NSString* _Nullable id_, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetMinerSCUserInfo get user pool
# Inputs
  - clientID: the id of wallet
  - cb: callback for checking result
 */
FOUNDATION_EXPORT BOOL ZcncoreGetMinerSCUserInfo(NSString* _Nullable clientID, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetMinerSnapshots obtains list of allocations of a miner.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetMinerSnapshots(int64_t round, int64_t limit, int64_t offset, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetMiners obtains list of all active miners.

		# Inputs
	  - cb: callback for checking result
	  - limit: how many miners should be fetched
	  - offset: how many miners should be skipped
	  - active: only fetch active miners
 */
FOUNDATION_EXPORT void ZcncoreGetMiners(id<ZcncoreGetInfoCallback> _Nullable cb, long limit, long offset, BOOL active);

/**
 * GetMintNonce retrieve mint nonce from sharders
 */
FOUNDATION_EXPORT BOOL ZcncoreGetMintNonce(id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetMultisigPayload given a multisig wallet as a string, makes a multisig wallet payload to register
 */
FOUNDATION_EXPORT id<ZcncoreMultisigSCWallet> _Nullable ZcncoreGetMultisigPayload(NSString* _Nullable mswstr, NSError* _Nullable* _Nullable error);

/**
 * GetMultisigVotePayload given a multisig vote as a string, makes a multisig vote payload to register
 */
FOUNDATION_EXPORT id<ZcncoreMSVote> _Nullable ZcncoreGetMultisigVotePayload(NSString* _Nullable msvstr, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT ZcncoreNetwork* _Nullable ZcncoreGetNetwork(void);

FOUNDATION_EXPORT ZcncoreNetwork* _Nullable ZcncoreGetNetworkDetails(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZcncoreGetNetworkJSON(void);

/**
 * GetBalance retrieve wallet nonce from sharders
 */
FOUNDATION_EXPORT BOOL ZcncoreGetNonce(id<ZcncoreGetNonceCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetNotProcessedZCNBurnTickets retrieve wallet burn tickets from sharders
 */
FOUNDATION_EXPORT BOOL ZcncoreGetNotProcessedZCNBurnTickets(NSString* _Nullable ethereumAddress, NSString* _Nullable startNonce, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZcncoreGetPublicEncryptionKey(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

/**
 * GetReadPoolInfo obtains information about read pool of a user.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetReadPoolInfo(NSString* _Nullable clientID, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetSharderSnapshots obtains list of allocations of a sharder.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetSharderSnapshots(int64_t round, int64_t limit, int64_t offset, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetSharders obtains list of all active sharders.
# Inputs
  - cb: callback for checking result
  - limit: how many sharders should be fetched
  - offset: how many sharders should be skipped
  - active: only fetch active sharders
 */
FOUNDATION_EXPORT void ZcncoreGetSharders(id<ZcncoreGetInfoCallback> _Nullable cb, long limit, long offset, BOOL active);

/**
 * GetSnapshots obtains list of allocations of a user.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetSnapshots(int64_t round, int64_t limit, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetStakePoolInfo obtains information about stake pool of a blobber and
related validator.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetStakePoolInfo(NSString* _Nullable blobberID, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetStakePoolUserInfo for a user.
# Inputs
  - clientID: the id of wallet
  - cb: callback for checking result
 */
FOUNDATION_EXPORT BOOL ZcncoreGetStakePoolUserInfo(NSString* _Nullable clientID, long offset, long limit, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetStorageSCConfig obtains Storage SC configurations.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetStorageSCConfig(id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetTransactions query transactions from sharders
# Inputs
  - toClient:   	receiver
  - fromClient: 	sender
  - block_hash: 	block hash
  - sort:				desc or asc
  - limit: 			how many transactions should be fetched
  - offset:			how many transactions should be skipped
  - cb: 					callback to get result
 */
FOUNDATION_EXPORT BOOL ZcncoreGetTransactions(NSString* _Nullable toClient, NSString* _Nullable fromClient, NSString* _Nullable block_hash, NSString* _Nullable sort, long limit, long offset, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetUserLockedTotal get total token user locked
# Inputs
  - clientID wallet id
 */
FOUNDATION_EXPORT BOOL ZcncoreGetUserLockedTotal(NSString* _Nullable clientID, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * GetUserSnapshots replicates user aggregates from events_db.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetUserSnapshots(int64_t round, int64_t limit, int64_t offset, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetValidatorSnapshots obtains list of allocations of a validator.
 */
FOUNDATION_EXPORT BOOL ZcncoreGetValidatorSnapshots(int64_t round, int64_t limit, int64_t offset, id<ZcncoreGetInfoCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

/**
 * GetVersion - returns version string
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreGetVersion(void);

/**
 * GetWalletAddrFromEthMnemonic - wallet ETH address from mnemoninnc
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreGetWalletAddrFromEthMnemonic(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL ZcncoreGetWalletBalance(NSString* _Nullable id_, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * GetWalletClientID -- given a walletstr return ClientID
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreGetWalletClientID(NSString* _Nullable walletStr, NSError* _Nullable* _Nullable error);

/**
 * GetWalletBalance retrieve wallet nonce from sharders
 */
FOUNDATION_EXPORT BOOL ZcncoreGetWalletNonce(NSString* _Nullable clientID, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

// skipped function GetWalletRaw with unsupported parameter or return types


/**
 * GetZcnUSDInfo returns USD value for ZCN token by tokenrate
 */
FOUNDATION_EXPORT BOOL ZcncoreGetZcnUSDInfo(double* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * Init initialize the SDK with miner, sharder and signature scheme provided in configuration provided in JSON format
# Inputs
  - chainConfigJSON: json format of zcn config
    {
    "block_worker": "https://dev.0chain.net/dns",
    "signature_scheme": "bls0chain",
    "min_submit": 50,
    "min_confirmation": 50,
    "confirmation_chain_length": 3,
    "max_txn_query": 5,
    "query_sleep_time": 5,
    "preferred_blobbers": ["https://dev.0chain.net/blobber02","https://dev.0chain.net/blobber03"],
    "chain_id":"0afc093ffb509f059c55478bc1a60351cef7b4e9c008a53a6cc8241ca8617dfe",
    "ethereum_node":"https://ropsten.infura.io/v3/xxxxxxxxxxxxxxx",
    "zbox_host":"https://0box.dev.0chain.net",
    "zbox_app_type":"vult",
    }
 */
FOUNDATION_EXPORT BOOL ZcncoreInit(NSString* _Nullable chainConfigJSON, NSError* _Nullable* _Nullable error);

/**
 * InitSignatureScheme initializes signature scheme only.
 */
FOUNDATION_EXPORT void ZcncoreInitSignatureScheme(NSString* _Nullable scheme);

// skipped function InitZCNSDK with unsupported parameter or return types


/**
 * IsEthTransactionVerified - checks if the transaction is verified
with a help of the given transaction hash
 */
FOUNDATION_EXPORT BOOL ZcncoreIsEthTransactionVerified(NSString* _Nullable txHash, BOOL* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * IsMnemonicValid is an utility function to check the mnemonic valid

	# Inputs
	-	mnemonic: mnemonics
 */
FOUNDATION_EXPORT BOOL ZcncoreIsMnemonicValid(NSString* _Nullable mnemonic);

/**
 * IsValidEthAddress - multiple checks for valid ETH address
 */
FOUNDATION_EXPORT BOOL ZcncoreIsValidEthAddress(NSString* _Nullable ethAddr, BOOL* _Nullable ret0_, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT id<ZcncoreAddAuthorizerPayload> _Nullable ZcncoreNewAddAuthorizerPayload(NSString* _Nullable pubKey, NSString* _Nullable url);

FOUNDATION_EXPORT id<ZcncoreAuthorizerNode> _Nullable ZcncoreNewAuthorizerNode(NSString* _Nullable id_, int64_t fee);

FOUNDATION_EXPORT id<ZcncoreBlobber> _Nullable ZcncoreNewBlobber(NSString* _Nullable id_, NSString* _Nullable baseUrl, int64_t capacity, int64_t allocated, int64_t lastHealthCheck);

FOUNDATION_EXPORT ZcncoreHttpConsensusMaps* _Nullable ZcncoreNewHttpConsensusMaps(long consensusThresh);

FOUNDATION_EXPORT id<ZcncoreInputMap> _Nullable ZcncoreNewInputMap(void);

FOUNDATION_EXPORT id<ZcncoreMinerSCMinerInfo> _Nullable ZcncoreNewMinerSCMinerInfo(NSString* _Nullable id_, NSString* _Nullable delegateWallet, int64_t minStake, int64_t maxStake, long numDelegates, double serviceCharge);

FOUNDATION_EXPORT ZcncoreNetwork* _Nullable ZcncoreNewNetwork(void);

FOUNDATION_EXPORT id<ZcncoreRequestTimeout> _Nullable ZcncoreNewRequestTimeout(int64_t timeout);

/**
 * NewTransaction allocation new generic transaction object for any operation
# Inputs
  - cb: callback for transaction state
  - txnFee: ZCN tokens
  - nonce: latest nonce of current wallet. please set it with 0 if you don't know the latest value
 */
FOUNDATION_EXPORT id<ZcncoreTransactionScheme> _Nullable ZcncoreNewTransaction(id<ZcncoreTransactionCallback> _Nullable cb, NSString* _Nullable txnFee, int64_t nonce, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT id<ZcncoreValidator> _Nullable ZcncoreNewValidator(NSString* _Nullable id_, NSString* _Nullable baseUrl);

FOUNDATION_EXPORT id<ZcncoreVestingAddRequest> _Nullable ZcncoreNewVestingAddRequest(NSString* _Nullable desc, int64_t startTime, int64_t duration);

/**
 * RecoverOfflineWallet recovers the previously generated wallet using the mnemonic.
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreRecoverOfflineWallet(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

/**
 * RecoverWallet recovers the previously generated wallet using the mnemonic.
It also registers the wallet again to block chain.
 */
FOUNDATION_EXPORT BOOL ZcncoreRecoverWallet(NSString* _Nullable mnemonic, id<ZcncoreWalletCallback> _Nullable statusCb, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL ZcncoreRegisterToMiners(NSString* _Nullable clientId, NSString* _Nullable pubKey, id<ZcncoreWalletCallback> _Nullable callback, NSError* _Nullable* _Nullable error);

/**
 * SetAuthUrl will be called by app to set zauth URL to SDK.
# Inputs
  - url: the url of zAuth server
 */
FOUNDATION_EXPORT BOOL ZcncoreSetAuthUrl(NSString* _Nullable url, NSError* _Nullable* _Nullable error);

/**
 * SetLogFile - sets file path to write log
verbose - true - console output; false - no console output
 */
FOUNDATION_EXPORT void ZcncoreSetLogFile(NSString* _Nullable logFile, BOOL verbose);

/**
 * SetLogLevel set the log level.
lvl - 0 disabled; higher number (upto 4) more verbosity
 */
FOUNDATION_EXPORT void ZcncoreSetLogLevel(long lvl);

FOUNDATION_EXPORT void ZcncoreSetNetwork(ZcncoreNetwork* _Nullable net);

// skipped function SetWallet with unsupported parameter or return types


/**
 * SetWalletInfo should be set before any transaction or client specific APIs
splitKeyWallet parameter is valid only if SignatureScheme is "BLS0Chain"

	# Inputs
	- jsonWallet: json format of wallet
	{
	"client_id":"30764bcba73216b67c36b05a17b4dd076bfdc5bb0ed84856f27622188c377269",
	"client_key":"1f495df9605a4479a7dd6e5c7a78caf9f9d54e3a40f62a3dd68ed377115fe614d8acf0c238025f67a85163b9fbf31d10fbbb4a551d1cf00119897edf18b1841c",
	"keys":[
		{"public_key":"1f495df9605a4479a7dd6e5c7a78caf9f9d54e3a40f62a3dd68ed377115fe614d8acf0c238025f67a85163b9fbf31d10fbbb4a551d1cf00119897edf18b1841c","private_key":"41729ed8d82f782646d2d30b9719acfd236842b9b6e47fee12b7bdbd05b35122"}
	],
	"mnemonics":"glare mistake gun joke bid spare across diagram wrap cube swear cactus cave repeat you brave few best wild lion pitch pole original wasp",
	"version":"1.0",
	"date_created":"1662534022",
	"nonce":0
	}

- splitKeyWallet: if wallet keys is split
 */
FOUNDATION_EXPORT BOOL ZcncoreSetWalletInfo(NSString* _Nullable jsonWallet, BOOL splitKeyWallet, NSError* _Nullable* _Nullable error);

/**
 * SetupAuth prepare auth app with clientid, key and a set of public, private key and local publickey
which is running on PC/Mac.
 */
FOUNDATION_EXPORT BOOL ZcncoreSetupAuth(NSString* _Nullable authHost, NSString* _Nullable clientID, NSString* _Nullable clientKey, NSString* _Nullable publicKey, NSString* _Nullable privateKey, NSString* _Nullable localPublicKey, id<ZcncoreAuthCallback> _Nullable cb, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull ZcncoreSign(NSString* _Nullable hash, NSError* _Nullable* _Nullable error);

/**
 * Split keys from the primary master key
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreSplitKeys(NSString* _Nullable privateKey, long numSplits, NSError* _Nullable* _Nullable error);

/**
 * SuggestEthGasPrice - return back suggested price for gas
 */
FOUNDATION_EXPORT BOOL ZcncoreSuggestEthGasPrice(int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * TokensToEth - converting wei to eth tokens
 */
FOUNDATION_EXPORT double ZcncoreTokensToEth(int64_t tokens);

/**
 * TransferEthTokens - transfer ETH tokens to multisign wallet
 */
FOUNDATION_EXPORT NSString* _Nonnull ZcncoreTransferEthTokens(NSString* _Nullable fromPrivKey, int64_t amountTokens, int64_t gasPrice, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL ZcncoreUpdateNetworkDetails(NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL ZcncoreUpdateRequired(ZcncoreNetwork* _Nullable networkDetails);

FOUNDATION_EXPORT BOOL ZcncoreVerifyContentHash(NSString* _Nullable metaTxnDataJSON, BOOL* _Nullable ret0_, NSError* _Nullable* _Nullable error);

// skipped function WithNoEstimateFee with unsupported parameter or return types


@class ZcncoreAddAuthorizerPayload;

@class ZcncoreAuthCallback;

@class ZcncoreAuthorizerNode;

@class ZcncoreBlobber;

@class ZcncoreGetBalanceCallback;

@class ZcncoreGetInfoCallback;

@class ZcncoreGetNonceCallback;

@class ZcncoreInputMap;

@class ZcncoreMSVote;

@class ZcncoreMinerSCMinerInfo;

@class ZcncoreMultisigSCWallet;

@class ZcncoreRequestTimeout;

@class ZcncoreStringers;

@class ZcncoreTransactionCallback;

@class ZcncoreTransactionCommon;

@class ZcncoreTransactionScheme;

@class ZcncoreValidator;

@class ZcncoreVestingAddRequest;

@class ZcncoreWallet;

@class ZcncoreWalletCallback;

@interface ZcncoreAddAuthorizerPayload : NSObject <goSeqRefInterface, ZcncoreAddAuthorizerPayload> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)setStakePoolSettings:(NSString* _Nullable)delegateWallet minStake:(int64_t)minStake maxStake:(int64_t)maxStake numDelegates:(long)numDelegates serviceCharge:(double)serviceCharge;
@end

/**
 * AuthCallback needs to be implemented by the caller SetupAuth()
 */
@interface ZcncoreAuthCallback : NSObject <goSeqRefInterface, ZcncoreAuthCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * This call back gives the status of the Two factor authenticator(zauth) setup.
 */
- (void)onSetupComplete:(long)status err:(NSString* _Nullable)err;
@end

@interface ZcncoreAuthorizerNode : NSObject <goSeqRefInterface, ZcncoreAuthorizerNode> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)getID;
@end

@interface ZcncoreBlobber : NSObject <goSeqRefInterface, ZcncoreBlobber> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)setAvailable:(BOOL)p0;
- (void)setStakePoolSettings:(NSString* _Nullable)delegateWallet minStake:(int64_t)minStake maxStake:(int64_t)maxStake numDelegates:(long)numDelegates serviceCharge:(double)serviceCharge;
- (void)setTerms:(int64_t)readPrice writePrice:(int64_t)writePrice minLockDemand:(double)minLockDemand maxOfferDuration:(int64_t)maxOfferDuration;
@end

/**
 * GetBalanceCallback needs to be implemented by the caller of GetBalance() to get the status
 */
@interface ZcncoreGetBalanceCallback : NSObject <goSeqRefInterface, ZcncoreGetBalanceCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onBalanceAvailable:(long)status value:(int64_t)value info:(NSString* _Nullable)info;
@end

/**
 * GetInfoCallback needs to be implemented by the caller of GetLockTokenConfig() and GetLockedTokens()
 */
@interface ZcncoreGetInfoCallback : NSObject <goSeqRefInterface, ZcncoreGetInfoCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * OnInfoAvailable will be called when GetLockTokenConfig is complete
if status == StatusSuccess then info is valid
is status != StatusSuccess then err will give the reason
 */
- (void)onInfoAvailable:(long)op status:(long)status info:(NSString* _Nullable)info err:(NSString* _Nullable)err;
@end

/**
 * GetNonceCallback needs to be implemented by the caller of GetNonce() to get the status
 */
@interface ZcncoreGetNonceCallback : NSObject <goSeqRefInterface, ZcncoreGetNonceCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onNonceAvailable:(long)status nonce:(int64_t)nonce info:(NSString* _Nullable)info;
@end

@interface ZcncoreInputMap : NSObject <goSeqRefInterface, ZcncoreInputMap> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)addField:(NSString* _Nullable)key value:(NSString* _Nullable)value;
@end

@interface ZcncoreMSVote : NSObject <goSeqRefInterface, ZcncoreMSVote> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)getProposalID;
- (NSString* _Nonnull)getSignature;
- (NSString* _Nonnull)getTransferAmount;
- (NSString* _Nonnull)getTransferClientID;
- (NSString* _Nonnull)getTransferToClientID;
@end

@interface ZcncoreMinerSCMinerInfo : NSObject <goSeqRefInterface, ZcncoreMinerSCMinerInfo> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)getID;
@end

@interface ZcncoreMultisigSCWallet : NSObject <goSeqRefInterface, ZcncoreMultisigSCWallet> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)getClientID;
- (long)getNumRequired;
- (NSString* _Nonnull)getPublicKey;
- (NSString* _Nonnull)getSignatureScheme;
- (id<ZcncoreStringers> _Nullable)getSignerPublicKeys;
- (id<ZcncoreStringers> _Nullable)getSignerThresholdIDs;
@end

/**
 * RequestTimeout will be used for setting requests with timeout
 */
@interface ZcncoreRequestTimeout : NSObject <goSeqRefInterface, ZcncoreRequestTimeout> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (int64_t)get;
- (void)set:(int64_t)p0;
@end

/**
 * Stringers wraps the methods for accessing string slice
 */
@interface ZcncoreStringers : NSObject <goSeqRefInterface, ZcncoreStringers> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)get:(long)i error:(NSError* _Nullable* _Nullable)error;
- (long)len;
@end

/**
 * TransactionCallback needs to be implemented by the caller for transaction related APIs
 */
@interface ZcncoreTransactionCallback : NSObject <goSeqRefInterface, ZcncoreTransactionCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onAuthComplete:(ZcncoreTransaction* _Nullable)t status:(long)status;
- (void)onTransactionComplete:(ZcncoreTransaction* _Nullable)t status:(long)status;
- (void)onVerifyComplete:(ZcncoreTransaction* _Nullable)t status:(long)status;
@end

@interface ZcncoreTransactionCommon : NSObject <goSeqRefInterface, ZcncoreTransactionCommon> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)cancelAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createAllocation:(ZcncoreCreateAllocationRequest* _Nullable)car lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createReadPool:(NSError* _Nullable* _Nullable)error;
/**
 * ExecuteSmartContract implements wrapper for smart contract function
 */
- (BOOL)executeSmartContract:(NSString* _Nullable)address methodName:(NSString* _Nullable)methodName input:(NSString* _Nullable)input val:(NSString* _Nullable)val error:(NSError* _Nullable* _Nullable)error;
- (BOOL)faucetUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)finalizeAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (long)getVerifyConfirmationStatus;
- (BOOL)minerSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteMiner:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteSharder:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCMinerSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCSharderSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateGlobals:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)readPoolLock:(NSString* _Nullable)allocID blobberID:(NSString* _Nullable)blobberID duration:(int64_t)duration lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)readPoolUnlock:(NSError* _Nullable* _Nullable)error;
/**
 * Send implements sending token to a given clientid
 */
- (BOOL)send:(NSString* _Nullable)toClientID val:(NSString* _Nullable)val desc:(NSString* _Nullable)desc error:(NSError* _Nullable* _Nullable)error;
/**
 * SetTransactionFee implements method to set the transaction fee
 */
- (BOOL)setTransactionFee:(NSString* _Nullable)txnFee error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stakePoolLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stakePoolUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageScUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateAllocation:(NSString* _Nullable)allocID sizeDiff:(int64_t)sizeDiff expirationDiff:(int64_t)expirationDiff lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateBlobberSettings:(id<ZcncoreBlobber> _Nullable)blobber error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingAdd:(id<ZcncoreVestingAddRequest> _Nullable)ar value:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writePoolLock:(NSString* _Nullable)allocID lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writePoolUnlock:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
/**
 * ZCNSCAddAuthorizer adds authorizer
 */
- (BOOL)zcnscAddAuthorizer:(id<ZcncoreAddAuthorizerPayload> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
/**
 * ZCNSCUpdateAuthorizerConfig updates authorizer config by ID
 */
- (BOOL)zcnscUpdateAuthorizerConfig:(id<ZcncoreAuthorizerNode> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateGlobalConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * TransactionScheme implements few methods for block chain.

Note: to be buildable on MacOSX all arguments should have names.
 */
@interface ZcncoreTransactionScheme : NSObject <goSeqRefInterface, ZcncoreTransactionScheme> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)cancelAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createAllocation:(ZcncoreCreateAllocationRequest* _Nullable)car lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)createReadPool:(NSError* _Nullable* _Nullable)error;
/**
 * ExecuteFaucetSCWallet implements the `Faucet Smart contract` for a given wallet
 */
- (BOOL)executeFaucetSCWallet:(NSString* _Nullable)walletStr methodName:(NSString* _Nullable)methodName input:(NSData* _Nullable)input error:(NSError* _Nullable* _Nullable)error;
- (BOOL)executeSmartContract:(NSString* _Nullable)address methodName:(NSString* _Nullable)methodName input:(NSString* _Nullable)input val:(NSString* _Nullable)val error:(NSError* _Nullable* _Nullable)error;
- (BOOL)faucetUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)finalizeAllocation:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionError implements error string in case of transaction failure
 */
- (NSString* _Nonnull)getTransactionError;
/**
 * GetTransactionHash implements retrieval of hash of the submitted transaction
 */
- (NSString* _Nonnull)getTransactionHash;
/**
 * GetTransactionNonce returns nonce
 */
- (int64_t)getTransactionNonce;
- (long)getVerifyConfirmationStatus;
/**
 * GetVerifyError implements error string in case of verify failure error
 */
- (NSString* _Nonnull)getVerifyError;
/**
 * GetVerifyOutput implements the verification output from sharders
 */
- (NSString* _Nonnull)getVerifyOutput;
/**
 * Hash Transaction status regardless of status
 */
- (NSString* _Nonnull)hash;
- (BOOL)minerSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteMiner:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCDeleteSharder:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCMinerSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCSharderSettings:(id<ZcncoreMinerSCMinerInfo> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerSCUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)minerScUpdateGlobals:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
/**
 * Output of transaction.
 */
- (NSData* _Nullable)output;
- (BOOL)readPoolLock:(NSString* _Nullable)allocID blobberID:(NSString* _Nullable)blobberID duration:(int64_t)duration lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)readPoolUnlock:(NSError* _Nullable* _Nullable)error;
- (BOOL)send:(NSString* _Nullable)toClientID val:(NSString* _Nullable)val desc:(NSString* _Nullable)desc error:(NSError* _Nullable* _Nullable)error;
/**
 * SetTransactionCallback implements storing the callback
used to call after the transaction or verification is completed
 */
- (BOOL)setTransactionCallback:(id<ZcncoreTransactionCallback> _Nullable)cb error:(NSError* _Nullable* _Nullable)error;
- (BOOL)setTransactionFee:(NSString* _Nullable)txnFee error:(NSError* _Nullable* _Nullable)error;
/**
 * SetTransactionHash implements verify a previous transaction status
 */
- (BOOL)setTransactionHash:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SetTransactionNonce implements method to set the transaction nonce
 */
- (BOOL)setTransactionNonce:(int64_t)txnNonce error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stakePoolLock:(NSString* _Nullable)providerId providerType:(long)providerType lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)stakePoolUnlock:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageSCCollectReward:(NSString* _Nullable)providerId providerType:(long)providerType error:(NSError* _Nullable* _Nullable)error;
- (BOOL)storageScUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
/**
 * StoreData implements store the data to blockchain
 */
- (BOOL)storeData:(NSString* _Nullable)data error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateAllocation:(NSString* _Nullable)allocID sizeDiff:(int64_t)sizeDiff expirationDiff:(int64_t)expirationDiff lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)updateBlobberSettings:(id<ZcncoreBlobber> _Nullable)blobber error:(NSError* _Nullable* _Nullable)error;
/**
 * Verify implements verify the transaction
 */
- (BOOL)verify:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingAdd:(id<ZcncoreVestingAddRequest> _Nullable)ar value:(NSString* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingDelete:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingStop:(ZcncoreVestingStopRequest* _Nullable)sr error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingTrigger:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUnlock:(NSString* _Nullable)poolID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)vestingUpdateConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writePoolLock:(NSString* _Nullable)allocID lock:(NSString* _Nullable)lock error:(NSError* _Nullable* _Nullable)error;
- (BOOL)writePoolUnlock:(NSString* _Nullable)allocID error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscAddAuthorizer:(id<ZcncoreAddAuthorizerPayload> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateAuthorizerConfig:(id<ZcncoreAuthorizerNode> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
- (BOOL)zcnscUpdateGlobalConfig:(id<ZcncoreInputMap> _Nullable)p0 error:(NSError* _Nullable* _Nullable)error;
@end

@interface ZcncoreValidator : NSObject <goSeqRefInterface, ZcncoreValidator> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)setStakePoolSettings:(NSString* _Nullable)delegateWallet minStake:(int64_t)minStake maxStake:(int64_t)maxStake numDelegates:(long)numDelegates serviceCharge:(double)serviceCharge;
@end

@interface ZcncoreVestingAddRequest : NSObject <goSeqRefInterface, ZcncoreVestingAddRequest> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)addDestinations:(NSString* _Nullable)id_ amount:(int64_t)amount;
@end

@interface ZcncoreWallet : NSObject <goSeqRefInterface, ZcncoreWallet> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (NSString* _Nonnull)sign:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * WalletCallback needs to be implemented for wallet creation.
 */
@interface ZcncoreWalletCallback : NSObject <goSeqRefInterface, ZcncoreWalletCallback> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onWalletCreateComplete:(long)status wallet:(NSString* _Nullable)wallet err:(NSString* _Nullable)err;
@end

#endif
